%Variables
PF:	'Linux'

%FindClientLibrary
FindClientLibrary() {
    MYSQL_NAME=libmysqlclient.so
    CLIENT_LIBRARY=

    # We use a variety of means to find libmysqlclient.so:
    #
    # 1. Via ldd of 'mysql' client program (may not be installed, or may link statically to MySQL)
    # 2. Via ldconfig -p (doesn't work properly on all systems)
    # 3. Search a list of likely directories
    #
    # If, after all that, we don't find it, then CLIENT_LIBRARY is empty, signifying a failure

    MYSQL_PATH=`which mysql`
    [ -n "${MYSQL_PATH}" ] && CLIENT_LIBRARY=`ldd ${MYSQL_PATH} | grep ${MYSQL_NAME} | awk '{print $3}'`

    # Be aware that /sbin/ldconfig may return multiple hits; if so, we'll use the first one
    [ -z "${CLIENT_LIBRARY}" ] && CLIENT_LIBRARY=`/sbin/ldconfig -p | grep ${MYSQL_NAME} | head -1 | awk '{print $NF}'`

    if [ -z "${CLIENT_LIBRARY}" ]; then
        SEARCH_LIST_64="/usr/lib64 /usr/lib64/mysql /lib64 /lib64/mysql /usr/lib/x86_64-linux-gnu"
        SEARCH_LIST_32="/usr/lib /usr/lib/mysql /lib /lib/mysql /usr/lib/*86-linux-gnu /usr/local/mysql/lib"

        if [ `uname -m` = "x86_64" ]; then
            SEARCH_LIST="${SEARCH_LIST_64} ${SEARCH_LIST_32}"
        else
            SEARCH_LIST="${SEARCH_LIST_32}"
        fi

        # echo "Searching for ${MYSQL_NAME} in: ${SEARCH_LIST}"
        for i in ${SEARCH_LIST}; do
            # echo "  Checking $i ..."
            if [ -e $i/${MYSQL_NAME} ]; then
                CLIENT_LIBRARY=$i/${MYSQL_NAME}
                break
            fi
        done
    fi
}

FindClientLibrary

%OmiService_funcs
StopOmiServer() {
    if [ -x /usr/sbin/invoke-rc.d ]; then
        /usr/sbin/invoke-rc.d omiserverd stop
    elif [ -x /sbin/service ]; then
        service omiserverd stop
    else
        echo "Unrecognized Service Controller to start OMI Service" 1>&2
        exit 1
    fi
}

StartOmiServer() {
    if [ -x /usr/sbin/invoke-rc.d ]; then
        /usr/sbin/invoke-rc.d omiserverd start
    elif [ -x /sbin/service ]; then
        service omiserverd start
    else
        echo "Unrecognized Service Controller to start OMI Service" 1>&2
        exit 1
    fi
}

RestartOmiServer() {
    if [ $OMI_IS_RUNNING -eq 1 ]; then
        StopOmiServer
    fi
    StartOmiServer
}

%Preinstall_100
#include FindClientLibrary

if [ -z "${CLIENT_LIBRARY}" ]; then
    echo "Unable to find prerequisite library ${MYSQL_NAME}" 1>&2
    exit 1
fi


%Preinstall_200
#include OmiService_funcs

#include CheckIfOmiIsRunning
if [ $OMI_IS_RUNNING -eq 1 ]; then
    StopOmiServer
fi

%Postinstall_2000
#include FindClientLibrary

if [ -z "${CLIENT_LIBRARY}" ]; then
    echo "Unable to find prerequisite library ${MYSQL_NAME}" 1>&2
    exit 1
fi

# Remove linkage in case it exists
MYSQL_BUILD_LIBRARY=${{MYSQL_BUILD_LIBRARY}}
LIBRARY_DIR='/opt/microsoft/mysql-cimprov/lib'
[ -e ${LIBRARY_DIR}/${MYSQL_BUILD_LIBRARY} ] && rm ${LIBRARY_DIR}/${MYSQL_BUILD_LIBRARY}
ln -s ${CLIENT_LIBRARY} ${LIBRARY_DIR}/${MYSQL_BUILD_LIBRARY}

#include OmiService_funcs
StartOmiServer

%Postuninstall_1000
# Calling sequence for RPM pre/post scripts, during upgrade, is as follows:
#   1. Run the %pre section of the RPM being installed.
#   2. Install the files that the RPM provides.
#   3. Run the %post section of the RPM.
#   4. Run the %preun of the old package.
#   5. Delete any old files not overwritten by the newer version.
#      (This step deletes files that the new package does not require.)
#   6. Run the %postun hook of the old package.
#
# Thus, if we're an upgrade, skip all of this cleanup
if ${{PERFORMING_UPGRADE_NOT}}; then 
   # Remove linkage in case it exists
   MYSQL_BUILD_LIBRARY=${{MYSQL_BUILD_LIBRARY}}
   LIBRARY_DIR='/opt/microsoft/mysql-cimprov/lib'
   [ -e ${LIBRARY_DIR}/${MYSQL_BUILD_LIBRARY} ] && rm ${LIBRARY_DIR}/${MYSQL_BUILD_LIBRARY}
   rmdir /opt/microsoft/mysql-cimprov/lib 2> /dev/null
   rmdir /opt/microsoft/mysql-cimprov 2> /dev/null
   rmdir /opt/microsoft 2> /dev/null
   rmdir /opt 2> /dev/null
fi

%Postuninstall_1100
#include OmiService_funcs
#include CheckIfOmiIsRunning

# If we're called for upgrade, don't do anything
if ${{PERFORMING_UPGRADE_NOT}}; then 
    RestartOmiServer
fi
