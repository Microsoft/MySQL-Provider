<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MCFTestlib_S</name>
    </assembly>
    <members>
        <member name="T:MCF.BaseTest">
            <summary>
            <p>MCFTestLib is a library of functions that perform automated tasks and verifications. Originally written for automating 
            tests through MCF, it is now also available as a standalone library that can be included in other projects.</p>
            
            <p>In terms of functionality there is almost no difference between the two versions. The one built for MCF framework
            includes code to interact with MCF framework such as test result reporting. There is only one file that is different
            between the two versions. Standalone version builds with common.cs whereas the other one builds with mcfcommon.cs. 
            In order to keep the two versions functionally equivalent modifications on these files should be minimized. Moreover, 
            when there is a modification to one of the files the changes must be reflected in the other one. This project is for the 
            standalone version. Go to MCFTestlib project to work with the MCF version.</p>
            
            <p>MCFTestLib_S.dll assembly contains a single class in it ("BaseTest") that includes many functions for various automation
            and verification tasks. The code is spread around various files with each file containing functions for specific
            tasks. The files are:</p>
            <ul>
            	<li>DB.cs - Contains functions for connecting to SQL server, executing queries</li>
            	<li>System.cs - Contains various functions for common system tasks such as process execution, file system operations,
            		remote task execution, screen capture, debugging etc.</li>
            	<li>Win32UITest.cs - Contains functions for native ui automation and common ui automation helper functions</li>
            	<li>WinFormsUITest.cs - Contains functions for automating application created with WinForms</li>
            	<li>IETest.cs - Contains functions for automating internet explorer and web ui testing</li>
            	<li>Common.cs - Contains common verification functions and the TestFailedException which is used to signal 
            		verification failures in the library.</li>
            </ul>
            </summary>
        </member>
        <member name="M:MCF.BaseTest.VerifyRegex(System.String,System.String)">
            <summary>Verify that the given pattern matches the text</summary>
            <param name="pattern_rx">Pattern to search for in the text. Accepts regular expressions</param>
            <param name="text">Text to search for the pattern</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyRegex(System.String,System.String)">
            <summary>Verify that the given pattern does not match the text</summary>
            <param name="pattern_rx">Pattern to search for in the text. Accepts regular expressions</param>
            <param name="text">Text to search for the pattern</param>
        </member>
        <member name="M:MCF.BaseTest.EscapeRegex(System.String)">
            <summary>Convert a string into a regular expression to match the string</summary>
            <param name="text">The string you want to verify</param>
            <returns>A regular expression that will match only the given string</returns>
            <example>
            Performing a regular expression match on '[3]a{5}' would match '3aaaaa'
            EscapeRegex will take '[3]a{5}' and return '\[3\]a\{5\}' which is a regular expression
            to match '[3]a{5}'
            </example>
        </member>
        <member name="M:MCF.BaseTest.CurrentTransactionValid">
            <summary>True if there is an active transaction, false otherwise</summary>
        </member>
        <member name="M:MCF.BaseTest.DBConnectionValid">
            <summary>True if there is an active database connection, false otherwise</summary>
        </member>
        <member name="M:MCF.BaseTest.ConnectDB(System.String)">
            <summary>Connects to the data source with the given connection string</summary>
            <param name="connectionString">The connection used to open the SQL Server database</param>
        </member>
        <member name="M:MCF.BaseTest.ConnectDB(System.String,System.String)">
            <summary>Connects to the given sql server and the given database name</summary>
            <param name="server">The name of the sql server instance</param>
            <param name="db">The name of the database</param>
        </member>
        <member name="M:MCF.BaseTest.CloseDB">
            <summary>Closes the active connection</summary>
        </member>
        <member name="M:MCF.BaseTest.BeginTransaction">
            <summary>Starts a new transaction. Sql statements run as part of the transaction 
            until the transaction is committed or aborted. Doesn't support nested transactions</summary>
        </member>
        <member name="M:MCF.BaseTest.CommitTransaction">
            <summary>Commits the current active transaction</summary>
        </member>
        <member name="M:MCF.BaseTest.RollbackTransaction">
            <summary>Rolls back the current active transaction</summary>
        </member>
        <member name="M:MCF.BaseTest.ExecuteSqlCommand(System.String[])">
            <summary>Wrapper function to handle Arrays</summary>
            <param name="cmdtextArray">The array of command text to execute.</param>
        </member>
        <member name="M:MCF.BaseTest.ExecuteSqlCommand(System.String)">
            <summary>Executes the given sql command text on the active connection. 
            Doesn't return back the results</summary>
            <param name="cmdtext">The command text to execute.</param>
        </member>
        <member name="M:MCF.BaseTest.ExecuteSqlScalar(System.String)">
            <summary>Execute a single value returning query</summary>
            <param name="query">The sql query string to execute</param>
            <returns>An object containing the scalar value. 
            Caller is responsible for casting to the appropriate type</returns>
        </member>
        <member name="M:MCF.BaseTest.ExecuteSqlQuery(System.String)">
            <summary>Execute a query that returns a table of data</summary>
            <param name="query">The sql query to execute</param>
            <returns>DataTable object containing the data</returns>
        </member>
        <member name="M:MCF.BaseTest.GetHtmlAttrib(System.String,System.String)">
            <summary>Returns the value of the specified attribute of a control that matches the identifier string</summary>
            <param name="id">Identifier string used to find the html control</param>
            <param name="attrib">Name of attribute to return</param>
            <returns>Value of the attribute of the matching control</returns>
        </member>
        <member name="M:MCF.BaseTest.WriteWebResponseToLog">
            <summary>Writes the raw web response to the log.</summary>
            <remarks>Created to help see how Maui translates HTML pages.</remarks>
        </member>
        <member name="M:MCF.BaseTest.WriteOuterHtml(System.String)">
            <summary>Gets the outer html from a control id and writes it to the log.</summary>
            <param name="id">The id of the control.  Can use parent/child path navigation.</param>
            <remarks>Useful for when the raw html of the page is too large for Maui</remarks>
            <seealso cref="M:MCF.BaseTest.GetHtmlControl(System.String)"/>
        </member>
        <member name="M:MCF.BaseTest.WaitForIE">
            <summary>Waits for page to load in IE</summary>
        </member>
        <member name="M:MCF.BaseTest.WaitForIE(System.Int32)">
            <summary>Waits for page to load in IE</summary>
            <param name="time">Maximum time (in ms) to wait for the page to load</param>
        </member>
        <member name="M:MCF.BaseTest.AttachToIEByCaption(System.String)">
            <summary>Attaches mIEApp to an existing instance of Internet Explorer</summary>
            <param name="title">Title of the web page to search for</param>
        </member>
        <member name="M:MCF.BaseTest.AttachToIE(System.String)">
            <summary>Attaches mIEApp to an existing instance of Internet Explorer</summary>
            <param name="title">Title of the web page to search for. Accepts regular expressions.</param>
        </member>
        <member name="M:MCF.BaseTest.AttachToIE(System.String,System.String)">
            <summary>Attaches mIEApp to an existing instance of Internet Explorer</summary>
            <param name="title">Title of the web page to search for</param>
            <param name="content">Html content of the page (required for pages with the same title)</param>
        </member>
        <member name="M:MCF.BaseTest.AttachToIE(System.String,System.String,System.Int32)">
            <summary>Attaches mIEApp to an existing instance of Internet Explorer</summary>
            <param name="title">Title of the web page to search for</param>
            <param name="content">Html content of the page (required for pages with the same title)</param>
            <param name="wait">Timeout value</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_AttachToIE(System.String,System.String)">
            <summary>Verifies previous instance of IE window not open</summary>
            <param name="title_rx">Title of the web page to search for. Accepts regular expressions</param>
            <param name="content_rx">Page content to search for. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.OpenIE(System.String,System.Int32)">
            <summary> Opens IE with given page url</summary>
            <param name="url">The url to navigate to when IE is opened</param>
            <param name="timeout">Timeout (in milliseconds)</param>
        </member>
        <member name="M:MCF.BaseTest.OpenIE(System.String)">
            <summary> Opens IE with given page url</summary>
            <param name="url">The url to navigate to when IE is opened</param>
        </member>
        <member name="M:MCF.BaseTest.Navigate(System.String)">
            <summary>Navigates to given url and waits for the page to load, assumes IE is already open (i.e. OpenIE is called once)</summary>
            <param name="url">The url of the page to navigate</param>
        </member>
        <member name="M:MCF.BaseTest.Navigate(System.String,System.Boolean,System.Boolean)">
            <summary>Navigates to the given url, assumes IE is already open (i.e. OpenIE is called once)</summary>
            <param name="url">The url of the page to navigate</param>
            <param name="useCache">true to allow navigate to use a cached copy of the page</param>
            <param name="wait">true if you want IE to wait for the page to finish loading before returning</param>
        </member>
        <member name="M:MCF.BaseTest.ClearIE7Cache">
            <summary>
            Clears cache of IE7
            </summary>
        </member>
        <member name="M:MCF.BaseTest.ForceRefreshIE">
            <summary> Forces a true page refresh (via Ctrl+F5)</summary>
        </member>
        <member name="M:MCF.BaseTest.GoBack">
            <summary>Clicks the back button in IE</summary>
        </member>
        <member name="M:MCF.BaseTest.GoForward">
            <summary>Clicks the forward button in IE</summary>
        </member>
        <member name="M:MCF.BaseTest.HandleIEMessageBox(System.String,System.String,System.String)">
            <summary>
            Selects the message box with the given title, verifies the content of the text box, then clicks a button
            </summary>
            <param name="title_rx">DEPRECATED. Title of the window to search for. Accepts regular expressions</param>
            <param name="caption_rx">Contents of a textbox in the window to verify. Accepts regular expressions</param>
            <param name="action_rx">Name of the button to click. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.CloseIE">
            <summary>Closes IE and invalidates mIEApp variable</summary>
        </member>
        <member name="M:MCF.BaseTest.CloseAllIE">
            <summary>Closes all instances of IE opened on the system</summary>
        </member>
        <member name="M:MCF.BaseTest.RefreshPage">
            <summary>Reloads the current page in IE</summary>
        </member>
        <member name="M:MCF.BaseTest.SetCurrentPage(System.String)">
            <summary>This is used with frameset documents; sets the current page to the frame given by its id
            Subsequent ui methods will use the set page</summary>
            <param name="pageid">The id of the frame document being searched. Supports recursive frames with ids seperated by '|'s.</param>
        </member>
        <member name="M:MCF.BaseTest.AttachToIFrame(System.String)">
            <summary>Attaches to an IFrame in the current page making its html page the current</summary>
            <param name="id">The id of the iframe control</param>
        </member>
        <member name="M:MCF.BaseTest.HandleFileDownloadDlg(System.String)">
            <summary>Automates file download dlg in internet explorer</summary>
            <param name="saveaspath">The path where the downloaded file will be put. Deletes the file
            if it already exists</param>
        </member>
        <member name="M:MCF.BaseTest.CancelFileDownloadDlg">
            <summary>Cancels the file download dlg in internet explorer</summary>
        </member>
        <member name="M:MCF.BaseTest.HandleFileUploadDlg(System.String)">
            <summary>Automates file upload dlg in internet explorer</summary>
            <param name="filepath">The path of the file to upload</param>
        </member>
        <member name="M:MCF.BaseTest.GetPageUrl">
            <summary>Returns the URL of the current page.</summary>
            <returns>URL of current page.</returns>
        </member>
        <member name="M:MCF.BaseTest.EncodeURIComponent(System.String)">
            <summary>Encodes a string as an url</summary>
            <param name="uri">String to be encoded</param>
            <returns>The  URL-encoded input string </returns>
        </member>
        <member name="M:MCF.BaseTest.SplitQueryString(System.String)">
            <summary>Splits a url query string into key-value pairs</summary>
            <param name="query">the query string to be split</param>
            <returns>Key-Value Pairs as PublicRecords collection</returns>
        </member>
        <member name="M:MCF.BaseTest.VerifyPageUrl(System.String)">
            <summary>Verifies the url of the current web page.</summary>
            <param name="url_rx">The url of the page. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlPageTitle(System.String)">
            <summary>Verifies the title of the current web page.</summary>
            <param name="title_rx">The title of the page. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlContains(System.String)">
            <summary>Verifies page html contains the given text</summary>
            <param name="html">The html to search for. Doesn't accept regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyHtmlContains(System.String)">
            <summary>Verifies page html doesn't contain the given text</summary>
            <param name="html">The html to search for. Doesn't accept regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtml(System.String)">
            <summary>Verifies page html by matching its contents with given text</summary>
            <param name="html_rx">The html to search for. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyHtml(System.String)">
            <summary>Verifies page html doesn't exist by matching its contents with given text</summary>
            <param name="html_rx">The html to search for. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyPageSource(System.String)">
            <summary>Uses an addition WebRequest to verify the page source 
            by matching its contents with given text</summary>
            <param name="html_rx">The page source html to search for. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyPageSource(System.String)">
            <summary>Sister function to VerifyPageSource.  Successful if html string is not found</summary>
            <param name="html_rx">The page source html to search for. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.CheckCurrentPageStatus">
            <summary>Checks if the current page is loaded correctly</summary>
        </member>
        <member name="M:MCF.BaseTest.RightClickHtmlControl(System.String)">
            <summary>Right-Click on a HtmlControl</summary>
            <param name="id">The id of the HtmlControl to be right clicked on.</param>
        </member>
        <member name="M:MCF.BaseTest.GetHtmlControlCoordinates(Maui.Core.HtmlControls.HtmlControl)">
            <summary>Returns the screen coordinates of a HtmlControl.
            body tag must be present on the html page</summary>
            <param name="element">The element whose coordinates are required</param>
            <returns>A Point with X and Y screen coordinates</returns>
        </member>
        <member name="M:MCF.BaseTest.ClickHtmlControl(System.String)">
            <summary>Clicks the html control with given id</summary>
            <param name="id">The id of the control to click. This should be the id given in html source</param>
        </member>
        <member name="M:MCF.BaseTest.ClickHtmlControl(System.String,System.Boolean)">
            <summary>Clicks the html control with given id</summary>
            <param name="id">The id of the control to click. This should be the id given in html source</param>
            <param name="blocking">false if you do not want IE to wait for the page to load after the click</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlControl(System.String)">
            <summary>Verifies the existence of control in a web page</summary>
            <param name="id">The id of the control to search for. This should be the id given in html source</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyHtmlControl(System.String)">
            <summary>Verifies that the control does not exist in a web page</summary>
            <param name="id">The id of the control to search for</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlControl(System.String,System.String)">
            <summary>Verifies if the control exists and it has the expected value
            For textboxes, this is the text they have</summary>
            <param name="id">The id of the control to search for</param>
            <param name="value_rx">The expected value of the control. The control needs to possess the value 
            attribute for this function to work. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.GetHtmlControlInnerText(System.String)">
            <summary>Returns the innertext of the given HTML control.</summary>
            <param name="id">ID of the control to search for</param>
            <returns>The innertext of the html control</returns>
            <remarks>Useful for reading data from TextArea controls, etc.</remarks>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlControlInnerText(System.String,System.String)">
            <summary>Verifies if the control exists and it has the expected innertext</summary>
            <param name="id">The id of the control to search for</param>
            <param name="innertext_rx">The expected value of the innertext. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyHtmlControlInnerText(System.String,System.String)">
            <summary>Verifies if the control does not exist or does not have the given innertext</summary>
            <param name="id">The id of the control to search for</param>
            <param name="innertext_rx">The value of the innertext. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlControlAttribute(System.String,System.String,System.String)">
            <summary>Verifies if the control exists and specified attribute has the expected value</summary>
            <param name="id">The id of the control to search for</param>
            <param name="key">The attribute of the control </param> 
            <param name="value_rx">The expected value of specified attribute. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyHtmlControlAttribute(System.String,System.String,System.String)">
            <summary>Verifies if the control does not exist or the specified attribute does not have the given value</summary>
            <param name="id">The id of the control to search for</param>
            <param name="key">The attribute of the control </param> 
            <param name="value_rx">The expected value of specified attribute. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlControlClass(System.String,System.String)">
            <summary>Verifies if the control exists and has the specified class</summary>
            <param name="id">The id of the control to search for</param>
            <param name="className">The expected class of the control</param> 
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyHtmlControlClass(System.String,System.String)">
            <summary>Verifies the control does not have the specified class</summary>
            <param name="id">The id of the control to search for</param>
            <param name="className">The class which should not be applied to the control</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlControlVisible(System.String)">
            <summary>Verify that the given html control is visible on the page.</summary>
            <param name="id">ID of the html control</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyHtmlControlVisible(System.String)">
            <summary>Verify that the given html control is not visible on the page.</summary>
            <param name="id">ID of the html control</param>
        </member>
        <member name="M:MCF.BaseTest.SelectHtmlTableCell(System.String,System.Int32,System.Int32)">
            <summary>Selects desired HTML table cell in page table grid layout</summary>
            <param name="id">The id of the table to search for</param>
            <param name="row">The row the cell native resides within</param> 
            <param name="col">The native column of the cell</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlTableCell(System.String)">
            <summary>Verifies the contents of the selected cell from SelectHtmlTableCell</summary>
            <param name="text_rx">Any text found within the targeted cell. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlTableCell(System.String,System.Int32,System.Int32,System.String)">
            <summary>Verifies table cell without having to select the cell</summary>
            <param name="id">The table id</param>
            <param name="row">The row the cell natively resides within</param>
            <param name="col">The native column of the cell</param>
            <param name="text_rx">The expected text of the cell. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.ClickHtmlTableCell">
            <summary>Clicks the selected HTML table cell from SelectHtmlTableCell</summary>
        </member>
        <member name="M:MCF.BaseTest.ClickHtmlTableLink(System.String,System.Int32,System.Int32,System.String)">
            <summary>Clicks the resident link within a given table cell</summary>
            <param name="id">Table id</param>
            <param name="row">The row the cell natively resides within</param>
            <param name="col">The native column of the cell</param>
            <param name="innertext_rx">The innertext of the link to search for. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.ClickHtmlLink(System.String)">
            <summary>Clicks the link with the given innertext. 
            Use this functions when you cannot identify a link by its href or id</summary>
            <param name="innertext">The text of the link</param>
        </member>
        <member name="M:MCF.BaseTest.ClickHtmlLink(System.String,System.Boolean)">
            <summary>Clicks the link with the given innertext. 
            Use this functions when you cannot identify a link by its href or id</summary>
            <param name="innertext">The text of the link</param>
            <param name="blocking">false if you do not want IE to wait for the page to load after the click</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlLink(System.String,System.String)">
            <summary>Verifies existence of a link given its href and innertext</summary>
            <param name="href">Target of the link</param>
            <param name="innertext">The innertext of the link</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyHtmlLink(System.String,System.String)">
            <summary>Verifies that the link with the given href does not exist on page</summary>
            <param name="href">The url of the link</param>
            <param name="innertext">The innertext of the link</param>
        </member>
        <member name="M:MCF.BaseTest.SetHtmlCheckBoxState(System.String,System.String)">
            <summary>Sets the state of the checkbox with given id</summary>
            <param name="id">The id of the checkbox control</param>
            <param name="state">One of the following checked, unchecked</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlCheckBoxState(System.String,System.String)">
            <summary>Verifies the state of the checkbox with given id</summary>
            <param name="id">The id of the checkbox control</param>
            <param name="state">One of the following checked, unchecked</param>
        </member>
        <member name="M:MCF.BaseTest.InputHtmlTextBox(System.String,System.String)">
            <summary>Inputs text into htmltextbox control</summary>
            <param name="id">The id of the textbox. This should be the id given in html source</param>
            <param name="text">The text to enter into the textbox</param>
        </member>
        <member name="M:MCF.BaseTest.InputHtmlTextArea(System.String,System.String)">
            <summary>Inputs text into htmltextarea control</summary>
            <param name="id">The id of the textarea. This should be the id given in html source</param>
            <param name="text">The text to enter into the textarea. Do not enter multiple lines in xml.
            Separate multiple lines with \n</param>
        </member>
        <member name="M:MCF.BaseTest.SelectHtmlComboBox(System.String,System.String)">
            <summary>Selects value of the combo box</summary>
            <param name="id">The id of the combo box. This should be the id given in html source</param>
            <param name="select">The value to select from combo box</param>
        </member>
        <member name="M:MCF.BaseTest.SelectHtmlComboBox(System.String,System.Int32)">
            <summary>Selects an item within an HTML combo box based upon index level</summary>
            <param name="id">Combo box id</param>
            <param name="index">Index of the item, starting at zero</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyHtmlComboBox(System.String,System.String)">
            <summary>Verifies HTMLComboBox selection</summary>
            <param name="id">Combo box id</param>
            <param name="value">Text to be verified within the selected combo box</param>
        </member>
        <member name="M:MCF.BaseTest.InputHtmlFile(System.String,System.String)">
            <summary>Inputs text into htmlfileinput control</summary>
            <param name="id">The id of the file input. This should be the id given in html source</param>
            <param name="text">The text to enter into the textbox</param>
        </member>
        <member name="M:MCF.BaseTest.ReplaceString(System.String,System.String,System.String)">
            <summary>Replaces values in a string</summary>
            <param name="input">Input string</param>
            <param name="oldValue">value to search for</param>
            <param name="newValue">replaced value</param>
            <returns>string with replaced contents</returns>
        </member>
        <member name="M:MCF.BaseTest.ExtractRegexGroups(System.String,System.String)">
            <summary>Performs a regular expression match on the input and returns subrecords for all the named groups</summary>
            <param name="input">String to be matched against</param>
            <param name="pattern_rx">Regular expression to use for matching. All named groups will be returned. There is also
            a default named group '0' which matches the entire pattern</param>
            <returns>A subrecords string containing all named groups</returns>
            <example>
            input: The number 57 is greater than 12
            <![CDATA[pattern_rx: The number (?<first_number>\d+) is greater than (?<second_number>\d+)]]>
            return: 0=The number 57 is greater than 12;first_number=57;second_number=12
            </example>
        </member>
        <member name="M:MCF.BaseTest.Pause">
            <summary>Pause function for debugging purposes. Pauses for 5 minutes</summary>
        </member>
        <member name="M:MCF.BaseTest.Pause(System.Int32)">
            <summary>Pause function for debugging purposes. Pauses for given time</summary>
            <param name="time">The time to sleep (in seconds)</param>
        </member>
        <member name="M:MCF.BaseTest.XmlBreakPoint">
            <summary> This function provides an empty wrapper for a C# break point. </summary>
            <remarks> This is helpful for testcases that are interdependant, have heavy snippit usage, and/or are very long</remarks>
        </member>
        <member name="M:MCF.BaseTest.Encrypt(System.String)">
            <summary>Encrypts the string that has been passed in using TripleDes. Note that 
            this function provides minimal security and it is not meant to protect
            sensitive data. The private key is stored inside the executable making
            its discovery an easy task.</summary>
            <param name="toEncrypt">The string that needs to be encrypted using TripleDes</param>
            <returns>The encrypted string</returns>
        </member>
        <member name="M:MCF.BaseTest.Decrypt(System.String)">
            <summary>Decrypts the string that has been encrypted using TripleDes </summary>
            <param name="toDecrypt">The string that has been encrypted using the TripleDesEncrypt utility</param>
            <returns>The decrypted string</returns>
        </member>
        <member name="M:MCF.BaseTest.ImpersonateUser(System.String,System.String)">
            <summary>Starts executing the thread under the given user and password. 
            Cannot be called while already impersonating.
            The specified user has to be an administrator on the machine</summary>
            <param name="user">User name in the form of domain\user</param>
            <param name="password">Encrypted password of the user</param>
        </member>
        <member name="M:MCF.BaseTest.StopImpersonation">
            <summary>Stops impersonation and continues running the tests under the user who started the test</summary>
        </member>
        <member name="M:MCF.BaseTest.PushImpersonateUser(System.String,System.String)">
            <summary>Starts executing the thread under the given user and password and places the user on a stack. 
            The specified user has to be an administrator on the machine</summary>
            <param name="user">User name in the form of domain\user</param>
            <param name="password">Encrypted password of the user</param>
        </member>
        <member name="M:MCF.BaseTest.PopImpersonation">
            <summary>Stops impersonation and continues running the tests under the previous user in the stack</summary>
        </member>
        <member name="M:MCF.BaseTest.IsImpersonating">
            <summary>Returns thread impersonation status</summary>
            <returns>True, if impersonating, false otherwise</returns>
        </member>
        <member name="M:MCF.BaseTest.ExecuteAppRemote(System.String,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>Executes command on remote machine.
            Look at ExecuteAppRemote function for parameter descriptions</summary>
            <see cref="M:MCF.BaseTest.ExecuteAppRemoteAsUser(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Boolean)"/>
            <param name="machine"/>
            <param name="command"/>
            <param name="arguments"/>
            <param name="directory"/>
            <param name="timeout"/>
            <param name="expectedresult"/>
        </member>
        <member name="M:MCF.BaseTest.ExecuteAppRemoteAsUser(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>Executes command on remote machine under the specified user account.
            Uses re.exe tool and expects the tool to be in the current directory
            The tool is in \\minerva\eepteam\Test\Infra\RE 
            IMPORTANT: RE.exe tool has a serious bug regarding process exit code
            Even if the remote executable has an error and returns an error code to the cmd line
            RE will return 0 always. This means expectedresult will not work
            TODO: Find another tool to fix this problem</summary>
            <param name="machine">The name of the machine to connect. 
            Current user should have admin permissions on this machine</param>
            <param name="command">The command to execute</param>
            <param name="arguments">The arguments to the command</param>
            <param name="directory">The directory to execute the command in. This should be the local path
            on the remote machine. By default it is c:\windows\system32</param>
            <param name="timeout">The time to wait for process to exit (in seconds)</param>
            <param name="user">User name to run the command under</param>
            <param name="passwd">Encrypted password of the user.Use Encrypt tool to encrypt the passwd</param>
            <param name="expectedresult">Reserved for future use. Doesn't work due to a bug
            in the underlying tool</param>
        </member>
        <member name="M:MCF.BaseTest.ExecuteAppSync(System.String,System.String,System.String,System.Int32)">
            <summary>Executes sync command by launching it with given arguments</summary>
            <param name="command">The command to execute</param>
            <param name="arguments">The arguments to the command</param>
            <param name="directory">The working directory for the command. By default it is set to current dir</param>
            <param name="timeout">The time to wait for process to exit (in seconds)</param>
            <returns>The exit code of the command</returns>
        </member>
        <member name="M:MCF.BaseTest.ExecuteAppSync(System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>Executes sync command by launching it with given arguments</summary>
            <param name="command">The command to execute</param>
            <param name="arguments">The arguments to the command</param>
            <param name="directory">The working directory for the command. By default it is set to current dir</param>
            <param name="timeout">The time to wait for process to exit (in seconds)</param>
            <param name="expectedresult">Whether expect command to complete successfully or not</param>
        </member>
        <member name="M:MCF.BaseTest.KillProcess(System.String)">
            <summary>Kills all running processes with the input string processName</summary>
            <param name="processName">Name of the process to kill. The name should be the same 
            as it is seen in task manager</param>
        </member>
        <member name="M:MCF.BaseTest.KillProcess(System.String,System.String)">
            <summary>Kills all processes with the input string processName running on the machineName</summary>
            <param name="processName">Name of the process to kill. The name should be the same 
            as it is seen in task manager</param>
            <param name="machineName">The name of the remote machine where the process is running</param>
        </member>
        <member name="M:MCF.BaseTest.StartService(System.String,System.String)">
            <summary>Starts the service with the given name. The service has to be in stopped state.</summary>
            <param name="serviceName">The short name of the service as seen in services panel</param>
            <param name="machineName">The computer on which the service resides, null for current machine </param>
        </member>
        <member name="M:MCF.BaseTest.StopService(System.String,System.String)">
            <summary>Stops the service with the given name</summary>
            <param name="serviceName">The short name of the service as seen in services panel</param>
            <param name="machineName">The computer on which the service resides, null for current machine </param>
        </member>
        <member name="M:MCF.BaseTest.IsUACEnabled">
            <summary>Returns UAC status. 
            The function assumes permissions for the key has not been modified.
            The function assumes the system is not pending a restart after making changes to UAC.
            If the user turned off UAC but did not restart the system, the function returns
            true even though UAC is still active</summary>
            <returns>True if UAC is enabled, false otherwise</returns>
        </member>
        <member name="M:MCF.BaseTest.IsUserAdmin(System.String,System.String)">
            <summary>Returns whether the given user is in administrators group.
            If UAC is enabled this function will return false even though the user is an administrator
            TODO: If a more comprehensive approach is needed, check out http://www.simple-talk.com/community/blogs/dana/default.aspx</summary>
            <returns>True if the user is in administrator group</returns>
        </member>
        <member name="M:MCF.BaseTest.CopyFile(System.String,System.String)">
            <summary>Copies file</summary>
            <param name="source">The path to source file</param>
            <param name="dest">The path to destination file</param>
        </member>
        <member name="M:MCF.BaseTest.TryDeleteFile(System.String)">
            <summary>Deletes file. Doesn't cause an error if the file doesn't exist</summary>
            <param name="file">The path to file to be deleted</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyFilePermission(System.String,System.String,System.String,System.Boolean)">
            <summary>Verify that the user has a specified role either allowed or denied at the given path. Inherited 
            permissions are also included</summary>
            <param name="path">The path to get permissions for</param>
            <param name="user">The user to get permissions for</param>
            <param name="role_rx">The role to search for</param>
            <param name="allow">Is the role expected to be allowed or denied</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyFilePermission(System.String,System.String,System.String,System.Boolean)">
            <summary>Verify that the user does not have a specified role either allowed or denied at the given path. 
            Inherited permissions are also included</summary>
            <param name="path">The path to get permissions for</param>
            <param name="user">The user to get permissions for</param>
            <param name="role_rx">The role to search for</param>
            <param name="allow">Is the role expected to be allowed or denied</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyXpath(System.String,System.String)">
            <summary>Verify an XML file has a match for the given XPath</summary>
            <param name="file">XML file to verify</param>
            <param name="xpath">XPath to verify (e.g. //node[@attr='attr_value'])</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyXpath(System.String,System.String)">
            <summary>Verify an XML file has no match for the given XPath</summary>
            <param name="file">XML file to verify</param>
            <param name="xpath">XPath to search for (e.g. //node[@attr='attr_value'])</param>
        </member>
        <member name="M:MCF.BaseTest.GetXmlNodeAttribute(System.String,System.String,System.String)">
            <summary>Get the value of a given node's attribute in an XML file.</summary>
            <param name="file">The path to the XML file</param>
            <param name="node">The specific node. It is Case-sensitive</param>
            <param name="attr">The specific attribute. It is Case-sensitive</param>
        </member>
        <member name="M:MCF.BaseTest.SetXmlNodeAttribute(System.String,System.String,System.String,System.String)">
            <summary>Sets the attribute of a given node in an XML file.</summary>
            <param name="file">The path to the XML file</param>
            <param name="node">The node to change. It is Case-sensitive</param>
            <param name="attr">The attribute to change. It is Case-sensitive</param>
            <param name="value">The new value of the attribute.</param>
        </member>
        <member name="M:MCF.BaseTest.GetXmlNodeInnerText(System.String,System.String)">
            <summary>Gets the inner text of a given node in an XML file.</summary>
            <param name="file">The path to the XML file</param>
            <param name="node">The specific node. It is Case-sensitive</param>
            <remarks>Do not use to get inner XML.</remarks>
            <seealso cref="M:MCF.BaseTest.GetXmlNodeInnerXml(System.String,System.String)"/>
        </member>
        <member name="M:MCF.BaseTest.SetXmlNodeInnerText(System.String,System.String,System.String)">
            <summary>Sets the inner text of a given node in an XML file.</summary>
            <param name="file">The path to the XML file</param>
            <param name="node">The node to change. It is Case-sensitive</param>
            <param name="innerText">The new inner text.</param>
            <remarks>Do not use to set inner XML.</remarks>
            <seealso cref="M:MCF.BaseTest.SetXmlNodeInnerXml(System.String,System.String,System.String)"/>
        </member>
        <member name="M:MCF.BaseTest.GetXmlNodeInnerXml(System.String,System.String)">
            <summary>Gets the inner xml of a given node in an XML file.</summary>
            <param name="file">The path to the XML file</param>
            <param name="node">The XPath query for a specific node.</param>
            <remarks>Do not use to get inner text.</remarks>
            <seealso cref="M:MCF.BaseTest.GetXmlNodeInnerText(System.String,System.String)"/>
        </member>
        <member name="M:MCF.BaseTest.SetXmlNodeInnerXml(System.String,System.String,System.String)">
            <summary>Sets the inner xml of a given node in an XML file.</summary>
            <param name="file">The path to the XML file</param>
            <param name="node">The XPath query for the specific node to change.</param>
            <param name="innerXml">The new inner xml.</param>
            <remarks>Do not use to set inner text.</remarks>
            <seealso cref="M:MCF.BaseTest.SetXmlNodeInnerText(System.String,System.String,System.String)"/>
        </member>
        <member name="M:MCF.BaseTest.ChangeAppConfigSettings(System.String,System.String,System.String)">
            <summary>Changes the given setting in a particular application config file with a new value</summary>
            <param name="file">The path to the config file</param>
            <param name="setting">The setting to change. It is Case-sensitive</param>
            <param name="value">The new value</param>
        </member>
        <member name="M:MCF.BaseTest.GetAppConfigSettings(System.String,System.String)">
            <summary>Returns the given setting in a particular application config file.</summary>
            <param name="file">The path to the config file</param>
            <param name="setting">The setting value to return. It is Case-sensitive</param>        
        </member>
        <member name="M:MCF.BaseTest.GenerateFile(System.String,System.Int32)">
            <summary>
            Generates a random file with the given path and size. Will fail if the file already exists.
            </summary>
            <param name="path">Path to the file to generate</param>
            <param name="size">Size of the file to generate (in MB)</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyFileExists(System.String)">
            <summary>Verify if a file exists</summary>
            <param name="path">The path to the file</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyFileExists(System.String)">
            <summary>Verify that a file does not exist</summary>
            <param name="path">The path to search</param>
        </member>
        <member name="M:MCF.BaseTest.WaitForFile(System.String,System.Int32)">
            <summary>Wait until a file exists</summary>
            <param name="path">The path to the file</param>
            <param name="timeout">Maximum time in seconds to wait for the file before failing</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyDirectoryExists(System.String)">
            <summary>Verify if a directory exists</summary>
            <param name="path">The path to the directory</param>
        </member>
        <member name="M:MCF.BaseTest.RemoveDirectory(System.String)">
            <summary>Removes a directory from disk</summary>
            <param name="path">Path to the directory</param>
        </member>
        <member name="M:MCF.BaseTest.RemoveFiles(System.String)">
            <summary>Remove files in a directory</summary>
            <param name="path">The path to the directory</param>
        </member>
        <member name="M:MCF.BaseTest.GetFileContents(System.String)">
            <summary>Helper function designed to populate record sets with data stored in files.</summary>
            <param name="filePath">The file that contains the desired data.</param>
            <returns>Returns the contents of a file as a string.</returns>
        </member>
        <member name="M:MCF.BaseTest.SetFileContents(System.String,System.String)">
            <summary>Create or overwrite a file with new content.</summary>
            <param name="filePath">The file to create/replace</param>
            <param name="content">The new contents of the file</param>
        </member>
        <member name="M:MCF.BaseTest.CaptureScreenToFile(System.String,System.Boolean)">
            <summary>Takes a screenshot and stores it as a jpeg file on disk.</summary>
            <param name="fileName">The filename to store the screen image. Don't put the extension.
            If there is an existing image file with the same name, it will be overwritten</param>
            <param name="appendDateTime">If true, appends date, time information to the file name</param>
        </member>
        <member name="M:MCF.BaseTest.CreateAVIFile(System.String,System.Boolean)">
            <summary>Creates an AVI file on disk to be later used by CaptureScreenToAVI function</summary>
            <param name="fileName">The filename for the avi file. Don't put the extension.
            If there is an existing file with the same name, it will be overwritten</param>
            <param name="appendDateTime">If true, appends date, time information to the file name</param>
        </member>
        <member name="M:MCF.BaseTest.CloseAVIFile">
            <summary>Closes opened avi file, cleaning up all resources</summary>
        </member>
        <member name="M:MCF.BaseTest.CaptureScreenToAVI">
            <summary>Takes a screenshot and writes it into test avi file. Call CreateAVIFile first
            to create the file</summary>
        </member>
        <member name="M:MCF.BaseTest.SendMail(System.String,System.String,System.String)">
            <summary>Sends mail</summary>
            <param name="to">The address of the recipient</param>
            <param name="subject">Email subject</param>
            <param name="body">The body of email message</param>
        </member>
        <member name="M:MCF.BaseTest.GetDate(System.String,System.String,System.String)">
            <summary>
            Returns the current date and time with a specified offset, using the given format
            </summary>
            <param name="format">The desired format of the date and time output</param>
            <param name="dateOffset">'/' seperated offsets for the date: months/days/years. Each offset also accepts negative numbers</param>
            <param name="timeOffset">':' seperated offsets for the time: hours:minutes:seconds. Each offset also accepts negative numbers</param>
            <returns>A string representing the desired date and time in the desired format</returns>
        </member>
        <member name="M:MCF.BaseTest.LocalTimeToUtc(System.DateTime)">
            <summary>
            Converts local time to universal time (UTC)
            </summary>
            <param name="localTime">local date/time</param>
            <returns>DateTime object in UTC</returns>
        </member>
        <member name="M:MCF.BaseTest.SetIPAddressForHost(System.String,System.String)">
            <summary>Adds the given ip address for a host into the hosts file in order to 
            target a specific machine for web site tests</summary>
            <param name="hostName">The host name (i.e. toolbox, msw)</param>
            <param name="ipAddress">The ip address entry to add for the host</param>
        </member>
        <member name="M:MCF.BaseTest.RemoveIPAddressesForHost(System.String)">
            <summary>Removes any ipaddress mapping for a hostname from hosts file</summary>
            <param name="hostName">The host name (i.e. toolbox, msw)</param>
        </member>
        <member name="M:MCF.BaseTest.Replace(System.String,System.String,System.String)">
            <summary>Replace all text that matches a regular expression pattern and return the result</summary>
            <param name="original">The string to perform replacement on</param>
            <param name="pattern_rx">The pattern to look for. Accepts regular expressions</param>
            <param name="newtext">The text used to replace any matching text</param>
            <returns>The passed in string after replacement</returns>
        </member>
        <member name="M:MCF.BaseTest.InputUIATextBox(System.String,System.String)">
            <summary>Enters a value into a textbox. Warning: Uses UIA control patterns</summary>
            <param name="id">The identifier for the textbox</param>
            <param name="text">Text to be entered.</param>
        </member>
        <member name="M:MCF.BaseTest.ClickUIAControl(System.String)">
            <summary>Clicks a control. Warning: Uses UIA control patterns</summary>
            <param name="id">The identifier for the control</param>
        </member>
        <member name="M:MCF.BaseTest.MoveCursorOverUIAControl(System.String)">
            <summary>Moves mouse cursor over a control with given id</summary>
            <param name="id">The identifier for the control</param>
        </member>
        <member name="M:MCF.BaseTest.SetCurrentUITechnology(System.String)">
            <summary>Set the current ui technology to be used</summary>
            <param name="uiTechnology">win32, winforms, html or uia</param>
        </member>
        <member name="M:MCF.BaseTest.ClickControl(System.String)">
            <summary>Clicks a control with the given id</summary>
            <param name="id">The id of the control</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyControl(System.String)">
            <summary>Verifies the given control exists</summary>
            <param name="id">The id of the control</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyControl(System.String)">
            <summary>Verifies the given control doesn't exist</summary>
            <param name="id">The id of the control</param>
        </member>
        <member name="M:MCF.BaseTest.InputTextBox(System.String,System.String)">
            <summary>Inputs text into a textbox control. </summary>
            <param name="id">The id of the textbox</param>
            <param name="text">The text to enter into the textbox</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyTextBox(System.String,System.String)">
            <summary>Verifies the text inside a textbox control</summary>
            <param name="id">The id of the textbox</param>
            <param name="text_rx">The text to search for</param>
        </member>
        <member name="M:MCF.BaseTest.SetCheckBox(System.String,System.String)">
            <summary>Sets the state of the checkbox with given id</summary>
            <param name="id">The identifier of the checkbox control</param>
            <param name="state">One of the following: checked, unchecked</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyCheckBox(System.String,System.String)">
            <summary>Verifies the state of a checkbox</summary>
            <param name="id">The identifier of the checkbox control</param>
            <param name="state">One of the following: checked, unchecked</param>
        </member>
        <member name="M:MCF.BaseTest.SelectComboBox(System.String,System.String)">
            <summary>Selects a given item in a combobox</summary>
            <param name="id">The identifier of the combobox</param>
            <param name="item">The item to select in the combobox</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyComboBox(System.String,System.String)">
            <summary>Verifies the selected value in a combobox</summary>
            <param name="id">The identifier of the combobox</param>
            <param name="item_rx">The text of the selected item to verify</param>
        </member>
        <member name="M:MCF.BaseTest.AssertTreeNodeValid">
            <summary>Helper function to check if there is an active treenode control selected</summary>
        </member>
        <member name="M:MCF.BaseTest.CloseWindow(System.String)">
            <summary>Close another window without connecting to it</summary>
            <remarks>This is necessary if the window belongs to a different architecture. 
            A 64 bit window cannot be attached to with 32 bit MAUI (and vice-versa), but this method will allow the 
            window to be closed.</remarks>
            <param name="title_rx">Title of the window to close (Accepts a regular expression)</param>
        </member>
        <member name="M:MCF.BaseTest.GetControl``1(System.String)">
            <summary>Gets a Windows Control with given AutomationId and type.</summary>
            <param name="automationId">AutomationId of control</param>
            <returns>Returns the Windows control with give AutomationId</returns>
        </member>
        <member name="M:MCF.BaseTest.ExecuteContextMenuItem(System.String)">
            <summary>Executes a menu item of an already open context menu</summary>
            <param name="menuItem">The Menu Item to be executed as String</param>
        </member>
        <member name="M:MCF.BaseTest.MaximizeWindow">
            <summary>Maximize application window</summary>
        </member>
        <member name="M:MCF.BaseTest.MinimizeWindow">
            <summary>Minimize application window</summary>
        </member>
        <member name="M:MCF.BaseTest.HandleWin32BrowseForFolder(System.String)">
            <summary>Handles BrowseForFolder dialog by selecting the given path</summary>
            <param name="browseto">The path consisting of the nodes to be selected inside the 
            control separated by | . For example:  Local Disk(C:)|folder 1|folder 2</param>
        </member>
        <member name="M:MCF.BaseTest.SendKeys(System.String)">
            <summary> Sends key to the application being tested</summary>
            <param name="keys">The text to send to the application.
            Look at http://msdn2.microsoft.com/en-us/library/system.windows.forms.sendkeys.aspx for sending 
            special keys to the application </param>
        </member>
        <member name="M:MCF.BaseTest.WaitForIdle">
            <summary>Waits for the application process to become idle.
            Use this function to give application enough time to do ui operations</summary>
        </member>
        <member name="M:MCF.BaseTest.SetCurrentWindow(System.String)">
            <summary>Finds the window with the title and sets it as the current window</summary>
            <param name="wndtitle_rx">The title text of the window. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.CloseCurrentWindow">
            <summary>Closes the current window specified by SetCurrentWindow function</summary>
        </member>
        <member name="M:MCF.BaseTest.VerifyWindowTitle(System.String)">
            <summary>Verifies window with given title exists</summary>
            <param name="title_rx">The title of the window being searched. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyWindowTitle(System.String,System.Int32)">
            <summary>Verifies window with given title doesn't exist</summary>
            <param name="title_rx">The title of the window being searched. Accepts regular expressions</param>
            <param name="timeout">The total time to retry</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyWindowTitle(System.String)">
            <summary>Verifies the window with given title does not exist</summary>
            <param name="title_rx">The title of the window being searched. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.ExecuteMainMenu(System.String)">
            <summary>Executes the given menu sequence</summary>
            <param name="items">List of menu items separated by | character</param>
        </member>
        <member name="M:MCF.BaseTest.ExecuteContextMenu(System.String)">
            <summary>Executes the given menu sequence on the ui element currently pointed by the mouse</summary>
            <param name="items">List of menu items separated by | character</param>
        </member>
        <member name="M:MCF.BaseTest.DblClick">
            <summary>Double Click at the current mouse location</summary>
        </member>
        <member name="M:MCF.BaseTest.RightClick">
            <summary>Right click at the current mouse location</summary>
        </member>
        <member name="M:MCF.BaseTest.VerifyClipboard(System.String)">
            <summary>Verifies that the clipboard contains the given text</summary>
            <param name="text_rx">Text to search for in the clipboard. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.ClickToolbar(System.Int32)">
            <summary>Toolbar controls need special handling
            Clicks the button with the given index on the toolbar of the current window</summary>
            <param name="index">The index of the button to click</param>
        </member>
        <member name="M:MCF.BaseTest.HandleMessageBox(System.String,System.String,System.String)">
            <summary>
            Selects the message box with the given title, verifies the content of the text box, then clicks a button
            </summary>
            <param name="title_rx">Title of the window to search for. Accepts regular expressions</param>
            <param name="caption_rx">Contents of a textbox in the window to verify. Accepts regular expressions</param>
            <param name="action_rx">Name of the button to click. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.ClickWinFormsControl(System.String)">
            <summary>Click the control with the id in the current window, assumes current window is set</summary>
            <param name="winFormsId">Winformsid of the control</param>
        </member>
        <member name="M:MCF.BaseTest.Click(System.String,System.String)">
            <summary>Click the control with the id in the window with the given title</summary>
            <param name="winFormsId">Winformsid of the control</param>
            <param name="wndtitle_rx">The title of the window containing the control. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.DblClick(System.String)">
            <summary>Double click the control with the id in the current window</summary>
            <param name="winFormsId">Winformsid of the control</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyWinFormsControl(System.String)">
            <summary>Verifies if control with given id exists</summary>
            <param name="winFormsId">The winformsid of the control being searched</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyWinFormsControl(System.String)">
            <summary>Verifies that the control with the given id does not exist</summary>
            <param name="winFormsId">The winformsid of the control being searched</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyControlCaption(System.String,System.String)">
             <summary>Verifies if control with given id exists and it has correct caption
            For textbox, this is the text in it
            For buttons, this is the button text</summary>
             <param name="winFormsId">The winformsid of the control being searched</param>
             <param name="caption_rx">The expected caption of the control. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.InputWinFormsTextBox(System.String,System.String)">
            <summary>Enter text into textbox</summary>
            <param name="winFormsId">The winformsid of the textbox</param>
            <param name="text">The text to enter into the textbox</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyWinFormsTextBox(System.String,System.String)">
            <summary>Verify text in the textbox</summary>
            <param name="winFormsId">The winformsid of the textbox</param>
            <param name="text_rx">The text to search for in the textbox. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.SelectWinFormsComboBox(System.String,System.String)">
            <summary>Selects the given item in the combobox with given id in current window</summary>
            <param name="winFormsId">The winformsid of the combobox control</param>
            <param name="item">The text of the item to be selected</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyWinFormsComboBox(System.String,System.String)">
            <summary>Verifies if combobox with given id exists and it has the correct element selected</summary>
            <param name="winFormsId">The winformsid of the control being searched</param>
            <param name="selected_rx">The selected element. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.SetWinFormsCheckBox(System.String,System.String)">
            <summary>Sets the state of the checkbox with given id in current window</summary>
            <param name="winFormsId">The winformsid of the checkbox control</param>
            <param name="state">One of the following checked, unchecked</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyWinFormsCheckBox(System.String,System.String)">
            <summary>Verifies the state of the checkbox with given id in current window</summary>
            <param name="winFormsId">The winformsid of the checkbox control</param>
            <param name="expstate">One of the following: checked, unchecked, partialchecked</param>
        </member>
        <member name="M:MCF.BaseTest.SelectListBoxItems(System.String,System.String)">
            <summary>Selects single or multiple items in a ListBox control</summary>
            <param name="winFormsId">Winformsid of the ListBox control</param>
            <param name="items">List of items separated by | character</param>
        </member>
        <member name="M:MCF.BaseTest.DeselectListBoxItems(System.String,System.String)">
            <summary>Deselects single or multiple items in a ListBox control</summary>
            <param name="winFormsId">Winformsid of the ListBox control</param>
            <param name="items">List of items separated by | character</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyListBoxItem(System.String,System.Int32,System.String)">
            <summary>Verifies that the ListBox contains the given item at the given index</summary>
            <param name="winFormsId">Winformsid of the ListBox control</param>
            <param name="index">Index of the item in the ListBox</param>
            <param name="item_rx">Name of the item in the ListBox. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyListBoxItem(System.String,System.Int32,System.String)">
            <summary>Verifies that the ListBox does not contains the given item at the given index</summary>
            <param name="winFormsId">Winformsid of the ListBox control</param>
            <param name="index">Index of the item in the ListBox</param>
            <param name="item_rx">Name of the item in the ListBox. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.SetDateTime(System.String,System.String)">
            <summary>Sets the date and time of the given DateTimePicker</summary>
            <param name="winFormsId">id of the DateTimePicker</param>
            <param name="datetime">date and time to set in the DateTimePicker</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyDateTime(System.String,System.String)">
            <summary>Verifies that the date and time given match the date and time of the specified control</summary>
            <param name="winFormsId">id of the DateTimePicker</param>
            <param name="datetime">date and time to check against the control</param>
        </member>
        <member name="M:MCF.BaseTest.SetCurrentPropertyGrid(System.String)">
            <summary>Sets the current propertygrid control so that property grid methods can be run</summary>
            <param name="winFormsId">Winformsid of the propertygrid control to be searched</param>
        </member>
        <member name="M:MCF.BaseTest.SetPropertyGridField(System.String,System.String)">
            <summary>Sets the value of a field in property grid control. mPropertyGrid must be set.</summary>
            <param name="field">The field whose value we're going to set</param>
            <param name="value">The field value we're going to input</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyPropertyGridField(System.String,System.String)">
            <summary>Gets the value of a field inside a property grid control. mPropertyGrid must be set.</summary>
            <param name="field">The field whose value we're going to verify</param>
            <param name="expvalue_rx">The expected value in the field. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.SetCurrentDataGrid(System.String)">
            <summary>Sets the current DataGrid control so that other functions can be used</summary>
            <param name="winFormsId">The id of the datagrid control to search for</param>
        </member>
        <member name="M:MCF.BaseTest.SelectDataGridRows(System.String)">
            <summary>Multi selects rows in current data grid control</summary>
            <param name="rows">The indices of rows to be selected separated by | character </param>
        </member>
        <member name="M:MCF.BaseTest.SelectDataGridCell(System.Int32,System.Int32)">
            <summary>Selects the cell whose coordinates are given in the current datagridcontrol</summary>
            <param name="row">Zero based index of the row to be selected</param>
            <param name="col">Zero based index of the column to be selected. If datagrid doesn't allow selection of 
            individual cells, use 0</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyDataGridCell(System.Int32,System.Int32,System.String)">
            <summary>Verifies if the cell with given coordinates has the expected text</summary>
            <param name="row">Zero based index of the row to be selected</param>
            <param name="col">Zero based index of the column to be selected</param>
            <param name="caption_rx">The expected caption of the cell. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_VerifyDataGridCell(System.Int32,System.Int32,System.String)">
            <summary>Verifies that the cell DOES NOT exist or it DOES NOT have the expected caption.</summary>
            <param name="row">Zero based index of the row to be selected</param>
            <param name="col">Zero based index of the column to be selected</param>
            <param name="caption_rx">The expected caption of the cell. Accepts regular expressions</param>
        </member>
        <member name="M:MCF.BaseTest.SetCurrentTreeView(System.String)">
            <summary>Sets the current treeview control so that treeview methods can be run</summary>
            <param name="winFormsId">The winformsid of the treeview control</param>
        </member>
        <member name="M:MCF.BaseTest.NavigateTree(System.String)">
            <summary>Navigates to a node in the current treeview control</summary>
            <param name="path">List of nodes separated by | character.Don't include root node</param>
        </member>
        <member name="M:MCF.BaseTest.Neg_NavigateTree(System.String)">
            <summary>Verifies that the given path does not exist in the tree</summary>
            <param name="path">List of nodes separated by | character.Don't include root node</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyTreeNodeIndex(System.Int32)">
            <summary>Verifies tree node position relative to its parent</summary>
            <param name="index">The expected index/position of the node. ( 0 based )</param>
        </member>
        <member name="M:MCF.BaseTest.VerifyTreeNode(System.String)">
            <summary>
            Verifies that the currently selected TreeNode matches the given name
            </summary>
            <param name="name_rx">The expected name of the TreeNode. Accepts regular expressions</param>
        </member>
        <member name="T:MCF.TestFailedException">
            <summary>Exception thrown in verification methods of the library</summary>
        </member>
        <member name="T:MCF.KeyValueCollection">
            <summary>Class that compliments record syntax. Supports serializing/deserializing a key-value collection as a 
            string through MCF, but using different delimiting characters from MCF subrecord syntax.</summary>
        </member>
        <member name="M:MCF.KeyValueCollection.Add(System.String,System.String)">
            <summary>Add a key-value entry</summary>
        </member>
        <member name="M:MCF.KeyValueCollection.Add(System.Collections.Specialized.NameValueCollection)">
            <summary>Add a NameValueCollection to the existing key-value pairs</summary>
            <param name="nameValueCollection">NameValueCollection that contains key-value pairs to be added</param>
        </member>
        <member name="M:MCF.KeyValueCollection.Remove(System.String)">
            <summary>Remove a key from the collection</summary>
            <param name="key"></param>
        </member>
        <member name="M:MCF.KeyValueCollection.GetKeys">
            <summary>Returns all keys in the record list.</summary>
        </member>
        <member name="M:MCF.KeyValueCollection.GetValue(System.String)">
            <summary>Returns an associated value.</summary>
        </member>
        <member name="M:MCF.KeyValueCollection.GetValues(System.String)">
            <summary>Returns all associated values as an array.</summary>
        </member>
        <member name="M:MCF.KeyValueCollection.HasKey(System.String)">
            <summary>Returns true if specified key exists.</summary>
        </member>
        <member name="T:MCF.PublicRecords">
            <summary>Class that is compatible with record syntax. Supports serializing/deserializing a key-value collection
            as a string through MCF, using the same syntax as MCF subrecords. This means that the returned values can be
            extracted using subrecord replacement.</summary>
        </member>
    </members>
</doc>
