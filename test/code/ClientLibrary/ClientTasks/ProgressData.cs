//-----------------------------------------------------------------------
// <copyright file="ProgressData.cs" company="Microsoft">
// Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace Microsoft.SystemCenter.CrossPlatform.ClientLibrary.ClientTasks
{
    using System;

    /// <summary>
    /// Data to be passed to the ProgressChanged event
    /// </summary>
    public class ProgressData
    {
        /// <summary>
        /// Constructor for data returned by background worker
        /// </summary>
        /// <param name="result">the result object</param>
        /// <param name="hostName">name of machine</param>
        /// <param name="hostIP">IP of machine</param>
        /// <param name="currentWorkflowNumber">curent work flow index</param>
        /// <param name="workFlowCount">total no of workflows</param>
        /// <param name="eventType">to identify that is created by background worker</param>
        public ProgressData(
            object result,
            string hostName,
            string hostIP,
            int currentWorkflowNumber,
            int workFlowCount,
            EventType eventType)
        {
            this.result = result;
            this.hostName = hostName;
            this.hostIP = hostIP;
            this.currentWorkFlowNumber = currentWorkflowNumber;
            this.workFlowCount = workFlowCount;
            this.eventTypeForData = eventType;
        }

        /// <summary>
        /// Constructor for data passed to the ReportProgressActivity
        /// </summary>
        /// <param name="workFlowCount">total no. of workflows</param>
        /// <param name="currentWorkflowNumber">current workflow no.</param>
        /// <param name="hostName">name of machine</param>
        /// <param name="hostIP">IP of machine</param>
        public ProgressData(
            int workFlowCount,
            int currentWorkflowNumber,
            string hostName,
            string hostIP)
        {
            this.workFlowCount = workFlowCount;
            this.currentWorkFlowNumber = currentWorkflowNumber;
            this.hostName = hostName;
            this.hostIP = hostIP;
            this.eventTypeForData = EventType.eventFromActivity;
        }

        /// <summary>
        /// Result to be returned
        /// </summary>
        public object Result
        {
            get
            {
                return this.result;
            }
        }

        /// <summary>
        /// Returns HostName if not null or empty, else IP
        /// </summary>
        /// <returns>HostName or HostIP</returns>
        public string GetMachineIdentifier()
        {
            if (!String.IsNullOrEmpty(this.HostName))
            {
                return this.HostName;
            }
            else
            {
                return this.HostIP;
            }
        }

        /// <summary>
        /// HostName of agent
        /// </summary>
        public string HostName
        {
            get
            {
                return this.hostName;
            }
        }

        /// <summary>
        ///  IP address of agent
        /// </summary>
        public string HostIP
        {
            get
            {
                return this.hostIP;
            }
        }

        /// <summary>
        /// Whether data is from event generated by worker or ShowProgress activity
        /// </summary>
        public EventType EventTypeForData
        {
            get
            {
                return this.eventTypeForData;
            }
        }

        /// <summary>
        /// current workflow no.
        /// </summary>
        public int CurrentWorkFlowNumber
        {
            get
            {
                return this.currentWorkFlowNumber;
            }
        }

        /// <summary>
        /// total no. of workflows
        /// </summary>
        public int WorkFlowCount
        {
            get
            {
                return this.workFlowCount;
            }
        }

        /// <summary>
        /// current activity no.
        /// </summary>
        public int CurrentStep
        {
            get
            {
                return this.currentStep;
            }

            set
            {
                this.currentStep = value;
            }
        }

        /// <summary>
        /// Total no of steps ie activities
        /// </summary>
        public int MaxStep
        {
            get
            {
                return this.maxStep;
            }

            set
            {
                this.maxStep = value;
            }
        }

        /// <summary>
        /// WorkFlowActivity identifier to be printed
        /// </summary>
        public string WorkflowActivityIdentifier
        {
            get
            {
                return this.workflowActivityIdentifier;
            }

            set
            {
                this.workflowActivityIdentifier = value;
            }
        }

        /// <summary>
        /// Any optional user defined entry in the ShowProgress activity
        /// </summary>
        public string OptionalUserDefinedContext
        {
            get
            {
                return this.optionalUserDefinedContext;
            }

            set
            {
                this.optionalUserDefinedContext = value;
            }
        }

        private int currentStep = FillerValueWhenPopulatedByWorker;
        private int maxStep = FillerValueWhenPopulatedByWorker;
        private int currentWorkFlowNumber = FillerValueWhenPopulatedByWorker;
        private int workFlowCount = FillerValueWhenPopulatedByWorker;
        private object result = null;
        private string hostName = String.Empty;
        private string hostIP = null;
        private string workflowActivityIdentifier = String.Empty;
        private string optionalUserDefinedContext = String.Empty;
        public const int FillerValueWhenPopulatedByWorker = -1;
        private EventType eventTypeForData;

        public enum EventType
        { 
            eventFromWorker, 
            eventFromActivity
        }
    }
}
