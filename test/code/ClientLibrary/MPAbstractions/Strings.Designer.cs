//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.SystemCenter.CrossPlatform.ClientLibrary.MPAbstractions {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.SystemCenter.CrossPlatform.ClientLibrary.MPAbstractions.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DNS Configuration error:
        ///The provided hostname {0} resolved to the IP address of {1}.  The hostname {2} returned by reverse lookup of the IP address {1} did not match the provided hostname.  Verify the DNS configuration and try the request again..
        /// </summary>
        internal static string DnsMismatchLookupException {
            get {
                return ResourceManager.GetString("DnsMismatchLookupException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found duplicate instances of a supported agent in imported management packs..
        /// </summary>
        internal static string DuplicateSupportedAgentsMessage {
            get {
                return ResourceManager.GetString("DuplicateSupportedAgentsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TargetSystem must be set before executing the task..
        /// </summary>
        internal static string GetProcessesTask_Execute_TargetSystem_must_be_set_before_executing_the_task {
            get {
                return ResourceManager.GetString("GetProcessesTask_Execute_TargetSystem_must_be_set_before_executing_the_task", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to parse output from the GetProcesses task. Output from task was:
        ///{0}.
        /// </summary>
        internal static string GetProcessesTaskResultParseFailure {
            get {
                return ResourceManager.GetString("GetProcessesTaskResultParseFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target system must be set before executing GetProcessesTemplateTask..
        /// </summary>
        internal static string GetProcessTemplateTask_Execute_Target_system_must_be_set_before_executing {
            get {
                return ResourceManager.GetString("GetProcessTemplateTask_Execute_Target_system_must_be_set_before_executing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to parse output from the Host Resolution task. Output from task was:
        ///{0}.
        /// </summary>
        internal static string HostResolutionTaskResultParseFailure {
            get {
                return ResourceManager.GetString("HostResolutionTaskResultParseFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hostname cannot be null or empty..
        /// </summary>
        internal static string KitInstallTask_SetParameterOverrides_Hostname_cannot_be_null_or_empty {
            get {
                return ResourceManager.GetString("KitInstallTask_SetParameterOverrides_Hostname_cannot_be_null_or_empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package name cannot be null or empty..
        /// </summary>
        internal static string KitInstallTask_SetParameterOverrides_Package_name_cannot_be_null_or_empty {
            get {
                return ResourceManager.GetString("KitInstallTask_SetParameterOverrides_Package_name_cannot_be_null_or_empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Port for ssh must be positive integer..
        /// </summary>
        internal static string KitInstallTask_SetParameterOverrides_Port_for_ssh_must_be_positive_integer {
            get {
                return ResourceManager.GetString("KitInstallTask_SetParameterOverrides_Port_for_ssh_must_be_positive_integer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to find a matching agent kit to install..
        /// </summary>
        internal static string NoMatchingInstallableAgentMessage {
            get {
                return ResourceManager.GetString("NoMatchingInstallableAgentMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to find a matching supported agent instance in the imported management packs..
        /// </summary>
        internal static string NoMatchingSupportedAgentMessage {
            get {
                return ResourceManager.GetString("NoMatchingSupportedAgentMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The computer named {0} is already managed by Operations Manager..
        /// </summary>
        internal static string PersistableUnixComputer_Persist_The_computer_named__0__is_already_managed_by_OpsMgr {
            get {
                return ResourceManager.GetString("PersistableUnixComputer_Persist_The_computer_named__0__is_already_managed_by_OpsM" +
                        "gr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Credential cannot be null or empty..
        /// </summary>
        internal static string SshDiscoveryTask_Credential_Null_or_Empty {
            get {
                return ResourceManager.GetString("SshDiscoveryTask_Credential_Null_or_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supplied credentials does not support use for SSH Discovery.
        /// </summary>
        internal static string SshDiscoveryTask_Credentials_do_not_support_SSH {
            get {
                return ResourceManager.GetString("SshDiscoveryTask_Credentials_do_not_support_SSH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hostname is invalid (null or empty).
        /// </summary>
        internal static string SshDiscoveryTask_Hostname_null_or_empty {
            get {
                return ResourceManager.GetString("SshDiscoveryTask_Hostname_null_or_empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The port for ssh cannot be negative.
        /// </summary>
        internal static string SshDiscoveryTask_SSHPort_Negative {
            get {
                return ResourceManager.GetString("SshDiscoveryTask_SSHPort_Negative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to parse output from SSH discovery. Output from task was:
        ///{0}..
        /// </summary>
        internal static string SSHDiscoveryTaskResultParseFailure {
            get {
                return ResourceManager.GetString("SSHDiscoveryTaskResultParseFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The response from the remote command was  null or empty..
        /// </summary>
        internal static string SshResponseIsNullOrEmpty {
            get {
                return ResourceManager.GetString("SshResponseIsNullOrEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result from the SSH command contained invalid result data:
        ///{0}.
        /// </summary>
        internal static string SSHTaskResponseIsInvalid {
            get {
                return ResourceManager.GetString("SSHTaskResponseIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result from the SSH command did not contain the expected XML node: &lt;SSHCommandData&gt;
        ///{0}.
        /// </summary>
        internal static string SSHTaskResponseIsNotExpectedXML {
            get {
                return ResourceManager.GetString("SSHTaskResponseIsNotExpectedXML", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nonparseable AgentVersion from Managed Object..
        /// </summary>
        internal static string UnixComputer_AgentVersion_Nonparseable_AgentVersion_from_Managed_Object {
            get {
                return ResourceManager.GetString("UnixComputer_AgentVersion_Nonparseable_AgentVersion_from_Managed_Object", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to find a managed unix computer with display name {0}..
        /// </summary>
        internal static string UnixComputerNotFound {
            get {
                return ResourceManager.GetString("UnixComputerNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WinRM client cannot process the request. Basic authentication is currently disabled in the client configuration. Verify the WinRM client configuration for all management servers in the resource pool and try the request again..
        /// </summary>
        internal static string WinRMBasicAuthDisableException {
            get {
                return ResourceManager.GetString("WinRMBasicAuthDisableException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The agent responded to the request but the WSMan connection failed due to: Access is Denied..
        /// </summary>
        internal static string WsmanAccessDeniedException {
            get {
                return ResourceManager.GetString("WsmanAccessDeniedException", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///   It is possible that:
        ///   1. The destination computer is unreachable (because it is down, or due to a firewall issue).
        ///   2. The destination certificate is signed by another certificate authority not trusted by the management server.
        ///   3. The destination has an invalid certificate, e.g., its common name (CN) does not match the fully qualified domain name (FQDN) used for the connection.
        ///   4. The servers in the resource pool have not been configured to trust certificates signed by other servers in th [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string WSManHostUnreachableException_Explanatory_Text {
            get {
                return ResourceManager.GetString("WSManHostUnreachableException_Explanatory_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is possible that:
        ///   1. The destination certificate is signed by another certificate authority not trusted by the management server. 
        ///   2. The destination has an invalid certificate, e.g., its common name (CN) does not match the fully qualified domain name (FQDN) used for the connection.  The FQDN used for the connection is: {0}.
        ///   3. The servers in the resource pool have not been configured to trust certificates signed by other servers in the pool..
        /// </summary>
        internal static string WSManSSLError {
            get {
                return ResourceManager.GetString("WSManSSLError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to parse output from WSMan discovery. Output from task was:
        ///{0}..
        /// </summary>
        internal static string WSManTaskResultParseFailure {
            get {
                return ResourceManager.GetString("WSManTaskResultParseFailure", resourceCulture);
            }
        }
    }
}
